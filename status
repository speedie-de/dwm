#!/bin/sh
# dynamic window manager status bar
# Written by speedie.gq for https://speedie.gq/dwm
# Licensed under the GNU GPLv3 free software license.

# NOTE: Anything in the DISPLAY function will be printed to your status bar.
# This means the output of a command will be printed as well.
# Once you're done editing, run 'make clean install'.

# Set generic colors as base.
SETCOLORS() {
  COLOR1=#ffffff
  COLOR2=#ffffff
  COLOR3=#ffffff
  COLOR4=#ffffff
  COLOR5=#ffffff
  COLOR6=#ffffff
  COLOR7=#ffffff
  COLOR8=#ffffff
  COLOR9=#ffffff
  COLOR10=#ffffff
  COLOR11=#ffffff
  COLOR12=#ffffff
  COLOR13=#ffffff
  COLOR14=#ffffff
  COLOR15=#ffffff
}

# Add colors to status2d compatible variable to use with xsetroot later.
SETCOLORS_CMD() {
  SETCOLORCMD1="^c${COLOR1}^"
  SETCOLORCMD2="^c${COLOR2}^"
  SETCOLORCMD3="^c${COLOR3}^"
  SETCOLORCMD4="^c${COLOR4}^"
  SETCOLORCMD5="^c${COLOR5}^"
  SETCOLORCMD6="^c${COLOR6}^"
  SETCOLORCMD7="^c${COLOR7}^"
  SETCOLORCMD8="^c${COLOR8}^"
  SETCOLORCMD9="^c${COLOR9}^"
  SETCOLORCMD10="^c${COLOR10}^"
  SETCOLORCMD11="^c${COLOR11}^"
  SETCOLORCMD12="^c${COLOR12}^"
  SETCOLORCMD13="^c${COLOR13}^"
  SETCOLORCMD14="^c${COLOR14}^"
  SETCOLORCMD15="^c${COLOR15}^"
}

# Grab colors from pywal if possible
SETCOLORS_WAL() {
  COLOR1=$(sed -n 1,1p $HOME/.cache/wal/colors)
  COLOR2=$(sed -n 2,2p $HOME/.cache/wal/colors)
  COLOR3=$(sed -n 3,3p $HOME/.cache/wal/colors)
  COLOR4=$(sed -n 4,4p $HOME/.cache/wal/colors)
  COLOR5=$(sed -n 5,5p $HOME/.cache/wal/colors)
  COLOR6=$(sed -n 6,6p $HOME/.cache/wal/colors)
  COLOR7=$(sed -n 7,7p $HOME/.cache/wal/colors)
  COLOR8=$(sed -n 8,8p $HOME/.cache/wal/colors)
  COLOR9=$(sed -n 9,9p $HOME/.cache/wal/colors)
  COLOR10=$(sed -n 10,10p $HOME/.cache/wal/colors)
  COLOR11=$(sed -n 11,11p $HOME/.cache/wal/colors)
  COLOR12=$(sed -n 12,12p $HOME/.cache/wal/colors)
  COLOR13=$(sed -n 13,13p $HOME/.cache/wal/colors)
  COLOR14=$(sed -n 14,14p $HOME/.cache/wal/colors)
  COLOR15=$(sed -n 15,15p $HOME/.cache/wal/colors)
  USINGWAL=true
}

MUTED=false


ITEM1() {
  echo "<  $(echo $(free -h --giga | awk '/^Mem/ {print $3}')B)"
}

ITEM2() {
  echo "<  $(date +%H:%M)"
}

ITEM3() {
  echo "<  $(date +%d/%m/%Y)"
}

ITEM4() {
  MUTED=false
  if [ -e "/usr/bin/pulsemixer" ]; then
		echo "<  $(echo $(pulsemixer --get-volume | awk '{ print $1 }')%)"
		test /tmp/dwm-audioctrl-mutestatus && grep "Not muted" /tmp/dwm-audioctrl-mutestatus > /dev/null && MUTED=false
		test /tmp/dwm-audioctrl-mutestatus && grep "Not muted" /tmp/dwm-audioctrl-mutestatus > /dev/null || MUTED=true
		test /tmp/dwm-audioctrl-mutestatus || MUTED=false
  else
		echo "<  $(echo $(amixer -c 0 get Master | tail -n1 | sed -r "s/.*\[(.*)%\].*/\1/")%)"
		MUTED=false
  fi

  if [ "$MUTED" = "false" ]; then
		a=$a
  else
		printf "\n (Muted)"
  fi
}

ITEM5() {
  curl -so /tmp/internet_test wttr.in && echo "<  $(echo $(curl wttr.in/?format="%C"), $(curl wttr.in/?format=3 | sed 's/.* //' | sed 's/.*\(.....\)/\1/'))"
}

ITEM6() {
  echo "<  $(awk '{$1=$1/1024000; print $1"B";}' /sys/class/net/[ew]*/statistics/tx_bytes | sed 's/.*\(....\)/\1/' | sed "s|B|B/s |")"
}

ITEM7() {
# Check if we're recording with dfmpeg or not
if [ -e "/tmp/dfmpeg-recording" ]; then
		echo "<  Recording"
fi
}

ITEM8() {
# CPU temp
if [ -e "/usr/bin/sensors" ]; then
		echo "<  $(sensors | grep "temp1" | sed 's/(.*//' | sed "s/temp1.//" | sed -r 's/\s+//g' | awk '{ print $1 }')"
fi
}

ITEM9() {
# Music
if [ -e "/usr/bin/mocp" ]; then
		if [ "$(echo $(mocp -Q %file))" = "" ]; then
				a=$a
		else
				echo "<  $(mocp -Q %file | awk -F/ '$0=$NF' | sed "s|[.]...||")"
		fi
fi
}

ITEM10() {
# RSS
if [ -e "/usr/bin/newsboat" ]; then
		pgrep -x newsboat > /dev/null || echo "<  $(newsboat -x print-unread | sed "s| unread articles||") unread!" > /tmp/newsboat && cat /tmp/newsboat
fi
}

ITEM11() {
  if [ -e "/sys/class/power_supply/BAT0/capacity" ]; then
		echo "<  $(cat /sys/class/power_supply/BAT0/capacity)%"
		case "$(cat /sys/class/power_supply/BAT0/capacity)" in
		"100") test /usr/bin/notify-send && test /tmp/hasnotified_full || notify-send "Fully charged." && touch /tmp/hasnotified_full ;;
		"30") test /usr/bin/notify-send && test /tmp/hasnotified_30 || notify-send "30% battery left." && touch /tmp/hasnotified_30 ;;
		"15") test /usr/bin/notify-send && test /tmp/hasnotified_15 || notify-send "15% battery left." && touch /tmp/hasnotified_15 ;;
		"5") test /usr/bin/notify-send && test /tmp/hasnotified_5 || notify-send "5% battery left. Charge your computer!" && touch /tmp/hasnotified_5 ;;
		esac
  fi

  if [ -e "/usr/bin/acpi" ]; then
		CHARGESTATUS=$(echo ", $(acpi | awk '{ print $3 }' | sed "s|,||g" | sed "s|Discharging|Not charging|g")") && echo $CHARGESTATUS
		case "$CHARGESTATUS" in
		", Charging") test /usr/bin/notify-send && test /tmp/hasnotified_charging || notify-send "Charging ($(cat /sys/class/power_supply/BAT0/capacity)% left)" && touch /tmp/hasnotified_charging && rm -f /tmp/hasnotified_full /tmp/hasnotified_30 /tmp/hasnotified_15 /tmp/hasnotified_5 ;;
		", Not charging") rm -f /tmp/hasnotified_charging ;;
		esac
  fi
}

BASE() {
  SLEEPTIME=12
}

# Item 1 = Memory X
# Item 2 = Time X
# Item 3 = Date X
# Item 4 = Volume X
# Item 5 = Weather 
# Item 6 = Internet Traffic X
# Item 7 = Dfmpeg Status
# Item 8 = CPU Temp
# Item 9 = Music
# Item 10 = Newsboat unreads
# Item 11 = Battery X

PRINT() {
  xsetroot -name "$SETCOLORCMD11$(ITEM2) $SETCOLORCMD10$(ITEM3) $SETCOLORCMD13$(ITEM11) $SETCOLORCMD8$(ITEM4) $SETCOLORCMD7$(ITEM1) $SETCOLORCMD6$(ITEM6) $SETCOLORCMD4$(ITEM8) $SETCOLORCMD3$(ITEM5) $SETCOLORCMD2$(ITEM9) $SETCOLORCMD5$(ITEM7)"

  if [ "$USINGWAL" = "true" ]; then
		if [ "$COLOR1" = "$(sed 1,1p $HOME/.cache/wal/colors)" ]; then
				a=$a
		else
				SETCOLORS_WAL && SETCOLORS_CMD
		fi
  fi

  sleep $SLEEPTIME
  PRINT
}

BASE
SETCOLORS
grep xsetroot $HOME/.config/swal/swal_wm && SETCOLORS_WAL
SETCOLORS_CMD

PRINT
